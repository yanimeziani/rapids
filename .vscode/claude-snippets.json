{
  "Create Mobile Feature": {
    "prefix": "cf-mobile-feature",
    "body": [
      "Create a new mobile feature following mobile-feature.md template:",
      "Feature name: ${1:feature-name}",
      "Description: ${2:feature description}",
      "",
      "Implementation checklist:",
      "- [ ] Application layer (Riverpod state management)",
      "- [ ] Domain models",
      "- [ ] Presentation layer (UI screens and widgets)",
      "- [ ] Repository for API calls",
      "- [ ] Add to app router",
      "- [ ] Write widget tests"
    ],
    "description": "Template for creating a new Flutter mobile feature"
  },
  "Create Backend API": {
    "prefix": "cf-backend-api",
    "body": [
      "Create a new backend API endpoint following backend-api.md template:",
      "Endpoint: /api/v1/${1:resource}",
      "Description: ${2:endpoint description}",
      "",
      "Implementation checklist:",
      "- [ ] SQLAlchemy model in models/${1:resource}.py",
      "- [ ] Pydantic schemas in schemas/${1:resource}.py",
      "- [ ] Service layer in services/${1:resource}_service.py",
      "- [ ] API router in api/v1/${1:resource}.py",
      "- [ ] Database migration",
      "- [ ] Write API tests"
    ],
    "description": "Template for creating a new FastAPI endpoint"
  },
  "Create Web Page": {
    "prefix": "cf-web-page",
    "body": [
      "Create a new web page following web-page.md template:",
      "Route: /app/${1:route}",
      "Description: ${2:page description}",
      "",
      "Implementation checklist:",
      "- [ ] page.tsx (Server Component)",
      "- [ ] metadata (title, description)",
      "- [ ] layout.tsx (if custom layout needed)",
      "- [ ] loading.tsx (loading state)",
      "- [ ] error.tsx (error boundary)",
      "- [ ] Client components (if needed)",
      "- [ ] Update navigation"
    ],
    "description": "Template for creating a new Next.js page"
  },
  "Fix Bug Workflow": {
    "prefix": "cf-fix-bug",
    "body": [
      "/fix-bug \"${1:bug description or error message}\"",
      "",
      "Debug workflow:",
      "1. Describe the bug clearly",
      "2. Claude will search relevant code",
      "3. Analyze the root cause",
      "4. Propose and implement fix",
      "5. Run tests to verify",
      "6. Update related code if needed"
    ],
    "description": "Workflow for fixing bugs with Claude"
  },
  "Deploy Workflow": {
    "prefix": "cf-deploy",
    "body": [
      "/deploy ${1|staging,prod|}",
      "",
      "Pre-deployment checklist:",
      "- [ ] All tests passing",
      "- [ ] Build succeeds",
      "- [ ] Database migrations ready",
      "- [ ] Environment variables configured",
      "- [ ] Health checks working",
      "- [ ] Rollback plan ready"
    ],
    "description": "Deployment workflow with pre-checks"
  },
  "Code Review Request": {
    "prefix": "cf-review",
    "body": [
      "Review my changes for ${1:feature name}:",
      "",
      "Check for:",
      "- [ ] Architecture and design patterns",
      "- [ ] Code quality and best practices",
      "- [ ] Security vulnerabilities",
      "- [ ] Performance issues",
      "- [ ] Test coverage",
      "- [ ] Documentation completeness"
    ],
    "description": "Request code review from Claude"
  },
  "Performance Analysis": {
    "prefix": "cf-performance",
    "body": [
      "Analyze and optimize performance for ${1:component/feature}:",
      "",
      "Areas to check:",
      "- [ ] Mobile: Widget rebuilds, list virtualization",
      "- [ ] Web: Bundle size, Core Web Vitals",
      "- [ ] Backend: Query optimization, N+1 queries",
      "- [ ] Database: Index analysis, slow queries"
    ],
    "description": "Performance analysis and optimization"
  },
  "Security Audit": {
    "prefix": "cf-security",
    "body": [
      "Run security audit on ${1:feature/module}:",
      "",
      "Security checks:",
      "- [ ] Authentication & authorization",
      "- [ ] Input validation (SQL injection, XSS)",
      "- [ ] Data protection (encryption, PII)",
      "- [ ] API security (rate limiting, CORS)",
      "- [ ] Dependencies (vulnerabilities)",
      "- [ ] Infrastructure (Docker, env vars)"
    ],
    "description": "Security audit workflow"
  },
  "Refactor Code": {
    "prefix": "cf-refactor",
    "body": [
      "/refactor ${1:target-file} ${2|extract,simplify,optimize,modernize,clean|}",
      "",
      "Refactoring strategy:",
      "- extract: Extract reusable components/functions",
      "- simplify: Reduce code complexity",
      "- optimize: Improve performance",
      "- modernize: Update to latest patterns",
      "- clean: Remove dead code"
    ],
    "description": "Refactor code with specific strategy"
  },
  "Generate Tests": {
    "prefix": "cf-test",
    "body": [
      "/test ${1|mobile,web,backend,e2e|} ${2:target-path}",
      "",
      "Test types:",
      "- mobile: Flutter widget/unit tests",
      "- web: Jest/React Testing Library",
      "- backend: Pytest",
      "- e2e: End-to-end tests"
    ],
    "description": "Generate and run tests"
  }
}
